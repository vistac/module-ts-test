{
  // Place your whc-frontend 工作區 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "content header": {
    "scope": "html",
    "prefix": "!init",
    "body": [
      "<div class=\"container bg-white\">",
      "  <div class=\"row navigation g-0 bg-primary justify-content-between align-items-center\">",
      "    <div class=\"col-lg-5 col-xl-5\">",
      "        <nav class=\"breadcrumb-nav\" style=\"--bs-breadcrumb-divider: '';\">",
      "          <ol class=\"breadcrumb d-flex align-items-center my-0\">",
      "            <li class=\"me-2\"><img src=\"assets/img/icon_manage.png\" alt=\"icon_folder\"></li>",
      "            <li class=\"breadcrumb-item text-white\">{{'$1.management'| translate}}</li>",
      "          </ol>",
      "        </nav>",
      "    </div>",
      "  </div>",
      "  <div class=\"bg-primary d-flex justify-content-between p-1\">",
      "    <div class=\"d-flex\">",
      "      <div class=\"btn-add d-flex align-items-center justify-content-around border border-secondary rounded-3 bg-white\">",
      "        <div class=\"add\"></div>",
      "        <p class=\"m-0 text-center\" (click)=\"openDialog('add')\">{{'$1.add'|translate}}</p>",
      "      </div>",
      "    </div>",
      "  </div>",
      "  <div>",
      "      <div [ngTemplateOutlet]=\"pageContent\" class=\"content\"></div>",
      "  </div>",
      "</div>",
      "",
      "<ng-template #pageContent>",
      "  <!--TODO Page Content HERE -->",
      "</ng-template>",
      "",
      "<ng-template #modal let-modal let-c=\"close\" let-d=\"dismiss\">",
      "  <div class=\"overflow-auto\">",
      "    <div class=\"modal-header\">",
      "      <h3 class=\"modal-title\" id=\"modal-basic-title\">{{'$1.' + method|translate}}</h3>",
      "      <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"d('Cross click')\"></button>",
      "    </div>",
      "    <div class=\"modal-body\">",
      "      <div [ngTemplateOutlet]=\"dialogContent\"></div>",
      "    </div>",
      "    <div class=\"modal-footer\">",
      "      <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"d('cancel')\">{{'common.cancel'|translate}}</button>",
      "      <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"save('save')\">{{'common.save'|translate}}</button>",
      "    </div>",
      "  </div>",
      "</ng-template>",
      "",
      "<ng-template #dialogContent let-modal let-c=\"close\" let-d=\"dismiss\">",
      "  <div [formGroup]=\"form\">",
      "  <!--TODO Form Content Here -->",
      "  </div>",
      "</ng-template>"
    ]
  },
  "content table": {
    "scope": "html",
    "prefix": "!table",
    "body": [
      "<div class=\"my-2\">",
      "  <div class=\"table-responsive\">",
      "    <table class=\"table table-bordered table-hover\">",
      "      <thead class=\"\">",
      "        <tr>",
      "          <th>{{'common.operation' | translate}}</th>",
      "          <th>{{'$1' | translate}}</th>",
      "          <th>{{'$2' | translate}}</th>",
      "          <th>{{'$3' | translate}}</th>",
      "        </tr>",
      "      </thead>",
      "      <tbody>",
      "        <tr *ngFor=\"let item of ${4:list}; let i=index\">",
      "         <td>item</td>",
      "         <td>item</td>",
      "         <td>item</td>",
      "         <td>item</td>",
      "        </tr>",
      "      </tbody>",
      "    </table>",
      "  </div>",
      "</div>"
    ]
  },
  "content dialog wrap": {
    "scope": "html",
    "prefix": "!dialog",
    "body": [
      "<div class=\"dialog-wrap\" [class.d-none]=\"hiddenDialog\">",
      "  <div class=\"dialog bg-white d-flex flex-column\">",
      "    <div class=\"dialog-header\">",
      "      <h1>{{subject | translate}}</h1>",
      "    </div>",
      "    <div class=\"dialog-body\">",
      "      <div [ngTemplateOutlet]=\"dialogContent\"></div>",
      "    </div>",
      "    <div class=\"dialog-footer\">",
      "      <div class=\"mx-2\">",
      "        <button (click)=\"onCancel()\">{{'common.cancel' | translate}}</button>",
      "      </div>",
      "      <div class=\"mx-2\">",
      "        <button (click)=\"onOk()\">{{'common.submit' | translate}}</button>",
      "      </div>",
      "    </div>",
      "  </div>",
      "</div>"
    ]
  },
  "content dialog - ngb": {
    "scope": "html",
    "prefix": "!modal",
    "body": [
      "<ng-template #modal let-modal let-c=\"close\" let-d=\"dismiss\">",
      "  <div class=\"overflow-auto\">",
      "    <div class=\"modal-header\">",
      "      <h3 class=\"modal-title\" id=\"modal-basic-title\">{{'$1' + method|translate}}</h3>",
      "      <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"d('Cross click')\"></button>",
      "    </div>",
      "    <div class=\"modal-body\">",
      "      <div [ngTemplateOutlet]=\"dialogContent\"></div>",
      "    </div>",
      "    <div class=\"modal-footer\">",
      "      <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"d('cancel')\">{{'common.cancel'|translate}}</button>",
      "      <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"save('save')\">{{'common.save'|translate}}</button>",
      "    </div>",
      "  </div>",
      "</ng-template>"
    ]
  },
  "content dialog - form": {
    "scope": "html",
    "prefix": "!dialog-form",
    "body": [
      "<ng-template #dialogContent let-modal let-c=\"close\" let-d=\"dismiss\">",
      "  <div [formGroup]=\"form\" class=\"row g-3\">",
      "  <!--TODO Form Content Here -->",
      "  </div>",
      "</ng-template>"
    ]
  },
  "bs5 accordion NgbPanelHeader": {
    "scope": "html",
    "prefix": "!ngbpanel-head",
    "body": [
      "<ng-template ngbPanelHeader let-opened=\"opened\">",
      "\t<div class=\"accordion-button bg-white\">",
      "\t\t<button ngbPanelToggle class=\"p-0 btn container-fluid text-start ps-0\">$1</button>",
      "\t</div>",
      "</ng-template>"
    ]
  },
  "font awesome icon block": {
    "scope": "html",
    "prefix": "!icon-block",
    "body": [
      "<div class=\"icon-block\" (click)=\"openDialog('edit', i)\" ngbTooltip=\"{{'$1' | translate}}\">",
      "  <fa-icon size=\"1x\" [icon]=\"$2\"></fa-icon>",
      "</div>"
    ]
  },

  "bs5 accordion NgbPanelContent": {
    "scope": "html",
    "prefix": "!ngbpanel-content",
    "body": ["<ng-template ngbPanelContent>", "$1", "</ng-template>"]
  },

  "bs5 accordion NgbPanel": {
    "scope": "html",
    "prefix": "!ngbpanel",
    "body": [
      "<ngb-panel>",
      "\t<ng-template ngbPanelHeader let-opened=\"opened\">",
      "\t\t<div class=\"accordion-button bg-white\">",
      "\t\t\t<button ngbPanelToggle class=\"p-0 btn container-fluid text-start ps-0\">${1:Title}</button>",
      "\t\t</div>",
      "\t</ng-template>",
      "\t<ng-template ngbPanelContent>",
      "\t$2",
      "\t</ng-template>",
      "</ngb-panel>"
    ]
  },

  "inpup-group-input": {
    "scope": "html",
    "prefix": "!input-text",
    "body": [
      "<div class=\"col-md-12\">",
      "\t<div class=\"input-group\">",
      "\t\t<label for=\"$2\" class=\"input-group-text\">{{'$1'|translate}}</label>",
      "\t\t<input id=\"$2\" type=\"text\" class=\"form-control\" formControlName=\"$2\" />",
      "\t</div>",
      "</div>"
    ]
  },

  "inpup-group-input-valid": {
    "scope": "html",
    "prefix": "!input-text-valid",
    "body": [
      "<div class=\"col-md-12\">",
      "\t<div class=\"input-group\">",
      "\t\t<label for=\"$2\" class=\"input-group-text\">{{'$1'|translate}}</label>",
      "\t\t<input id=\"$2\" type=\"text\" class=\"form-control\" formControlName=\"$2\" [ngClass]=\"{'is-invalid': controlInvalid('$2')}\"/>",
      "\t\t<div class=\"invalid-feedback d-block\" *ngIf=\"controlInvalid('$2')\">",
      "\t\t\t{{'$1'|translate}} {{'${3:validator.required}'|translate}}",
      "\t\t</div>",
      "\t</div>",
      "</div>"
    ]
  },

  "input-group-select": {
    "scope": "html",
    "prefix": "!input-select",
    "body": [
      "<div class=\"col-md-12\">",
      "\t<div class=\"input-group\">",
      "\t\t<label for=\"$2\" class=\"input-group-text\">{{'$1'|translate}}</label>",
      "\t\t<select id=\"$2\" class=\"form-select\" formControlName=\"$2\">",
      "\t\t\t<option [value]=\"item.value\" *ngFor=\"let item of ${3:items}; let i=index\" >{{item.text}}</option>",
      "\t\t</select>",
      "\t</div>",
      "</div>"
    ]
  },

  "new FormControl": {
    "scope": "typescript",
    "prefix": "!new-form-control",
    "body": "new FormControl('$1', []),"
  },

  "new FormControl Required": {
    "scope": "typescript",
    "prefix": "!new-form-control-required",
    "body": "new FormControl('$1', [Validators.required]),"
  },

  "new modal ViewChild": {
    "scope": "typescript",
    "prefix": "!new-modal-viewchild",
    "body": "@ViewChild('modal') private modalContent!: ElementRef;"
  },

  "method ControlInvalid": {
    "scope": "typescript",
    "prefix": "!new-control-invalid",
    "body": [
      "controlInvalid(controlName: string): boolean {",
      "\tlet control = <FormControl>this.form.controls[controlName];",
      "\treturn control.invalid && (control.dirty || control.touched);",
      "}"
    ]
  },

  "new modalRef": {
    "scope": "typescript",
    "prefix": "!new-modalRef",
    "body": [
      "this.modalRef = this.modalService.getModalRef(this.modalContent);",
      "this.modalRef.result.then(",
      "\t(result: any) => {",
      "\t\tconsole.log('result', result);",
      "\t\twindow.location.reload();",
      "\t\treturn true;",
      "\t},",
      "\t(reason: any) => {",
      "\t\tconsole.log('reason', reason);",
      "\t\treturn false;",
      "\t}",
      ");"
    ]
  },
  "Component init": {
    "scope": "typescript",
    "prefix": "!init",
    "body": [
      "form: FormGroup = new FormGroup({});",
      "private emptyFormData = {};",
      "method: string = 'add';",
      "private modalRef!: NgbModalRef;",
      "constructor( private apiMisc: ApiMiscService, private modalService: ModalService) {}",
      "@ViewChild('modal') private modalContent!: ElementRef;",
      "ngOnInit(): void {}",
      "cancel(reason: string = 'cancel') {}",
      "save(result: string = 'save') {}",
      "openDialog(method: string = 'add', index: number = 0) {}"
    ]
  }
}
